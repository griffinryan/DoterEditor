plugins {
	id 'application'
	id 'org.openjfx.javafxplugin' version '0.1.0'
}

group 'com.griffinryan.doter'
version '0.0.6'

description 'Doter Text Editor by Griffin Ryan'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	maven { url 'https://jitpack.io' }
	maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

ext {
	junitVersion = '5.8.2'
	javaMainClass = "com.griffinryan.doter.DoterApplication"
	author = 'Griffin Ryan <glryan@uw.edu>'
}

task fatJar(type: Jar) {
	manifest {
		attributes 'Implementation-Title': 'Doter Editor',
				'Main-Class': 'com.griffinryan.doter'
	}
	with jar
}

//sass {
//	sassDir = 'src/main/resources'
//	cssDir = 'src/main/resources'
//}

configurations {
	javafxCompile
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

application {
	mainClass = 'com.griffinryan.doter.DoterApplication'
}

javafx {
	version = "21.0.1"
	modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

dependencies {
	implementation('org.controlsfx:controlsfx:11.1.1')
	//implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
	//implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
	// implementation 'org.gradle:gradle-tooling-api:7.3-20210825160000+0000'
    implementation 'org.json:json:20211205'

	javafxCompile 'org.openjfx:javafx-base:21.0.1:win'
	javafxCompile 'org.openjfx:javafx-graphics:18.0.1:win'
	javafxCompile 'org.openjfx:javafx-controls:18.0.1:win'
	javafxCompile 'org.openjfx:javafx-fxml:18.0.1:win'

	implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.12.0'
	implementation 'org.fxmisc.richtext:richtextfx:0.10.9'
	implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	implementation 'eu.mihosoft.monacofx:monacofx:0.0.8'
	implementation 'com.google.cloud.tools:jib-maven-plugin:3.2.1'

	// Deprecated call as of Gradle 8.0
	// implementation configurations.javafxCompile

	testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
	useJUnitPlatform()
}

task copyDependencies(type: Copy) {
	// from configurations.runtime - configurations.javafxCompile
	from jar
	into "${buildDir}/lib"
}

run {
	// environment.putAll([
	// "NativePath": "${rootProject.projectDir}/native"
	// ])
	//jvmArgs("--add-opens", "java.base/java.io=ALL-UNNAMED")
	//jvmArgs("--enable-preview")
	//args = ['Test.txt']
}
