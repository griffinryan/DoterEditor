import org.apache.tools.ant.filters.ReplaceTokens

tasks.whenTaskAdded {task ->
    if(task.name.contains("startScripts") || task.name.contains("run")) {
        task.enabled = false
    }
}

apply plugin: 'java'
apply plugin: 'application'

// assert Runtime.version().major() == 16
sourceCompatibility = 16
targetCompatibility = 16

ext {
    publishedVersion = rootProject.version

    libraryPath = file("${rootProject.buildDir}/libraries")
    mainJar = rootProject.jar.outputs.files[0].name
    bundlePath = file("${buildDir}/bundle")

    // In-bundle resources
    windowsExecutable = file("${bundlePath}/MSPaintIDE/MSPaintIDE.exe")
    bundleContent = file("${bundlePath}/MSPaintIDE/*")
    bundleReadme = file("src/main/resources/README.html")
    appIcon = file('src/main/resources/icons/')

    generatedInnoSetupFile = file("${buildDir}/resources/main/MSPaintIDE.iss")

    bundlePath.deleteDir()
    bundlePath.mkdirs()

    useJpackage = project.properties['jpackage.home'] != ''
}

// Happens during assembly
task jpackage(type: Exec, dependsOn: ':copyDependencies') {
    def modules = [
            'java.management',
            'java.desktop',
            'java.compiler',
            'javafx.graphics',
            'javafx.controls',
            'javafx.fxml',
            'java.sql',
            'java.naming'
    ]

    commandLine "${project.properties['jpackage.home']}/bin/jpackage",
            'create-app-image',
            '--verbose',
            '--module-path', 'C:\\javafx-jmods-12.0.1',
            '--add-modules', modules.join(','),
            '--name', 'doter',
            '--icon', "${appIcon}/icon.ico",
            '--app-version', publishedVersion,
            '--description', 'Doter Editor',
            '--vendor', 'Griffin Ryan',
            '--input', libraryPath,
            '--output', bundlePath,
            '--main-jar', mainJar,
            '--main-class', 'com.griffinryan.doter.main.HelloApplication',
            '--java-options', '--add-opens javafx.base/com.sun.javafx.reflect=ALL-UNNAMED --add-opens java.base/jdk.internal.loader=ALL-UNNAMED --add-opens java.base/jdk.internal.loader=ALL-UNNAMED --add-opens javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED --add-opens javafx.base/com.sun.javafx.collections=ALL-UNNAMED --illegal-access=deny'
    environment << [JPACKAGE_DEBUG: true]
}

// Copies dependencies and resources to the bundle path
task completeInnoSetup {
    doLast {
        copy {
            from "${rootProject.projectDir}\\package\\src\\main\\resources"
            into "${bundlePath}\\doter"
            exclude 'doterE.iss'
            exclude 'icons'
        }

        copy {
            from "${rootProject.projectDir}/native/"
            into "${bundlePath}/doter/native"
            include 'PaintInjector.dll'
        }

        copy {
            from "${rootProject.projectDir}/src/main/resources/lsp"
            into "${bundlePath}/doter/lsp"
        }

        println "Inno Setup file: ${generatedInnoSetupFile}"
    }
}

// Replaces values in the .iss file
processResources {
    filesMatching('doter.iss') {
        filter ReplaceTokens, tokens: [
                'bundle.version'     : publishedVersion,
                'executable.location': windowsExecutable.toString(),
                'bundle.content'     : bundleContent.toString(),
                'bundle.readme'     : bundleReadme.toString(),
                'icon.directory'          : appIcon.toString()
        ]
    }
}

// Actually compiles the installer
task innoCompile(type: Exec) {
    executable 'C:\\Program Files (x86)\\Inno Setup 6\\compil32.exe'
    args "/cc", "\"${generatedInnoSetupFile}\""
    doLast {
        copy {
            from "${buildDir}\\resources\\main\\Output"
            into "${buildDir}"
            include "MSPaintIDE-${publishedVersion}.exe"
        }

        println "Installation file: ${buildDir}\\MSPaintIDE-${publishedVersion}.exe"
    }
}

if (useJpackage) assemble.dependsOn jpackage



def buildAliases = [
        'compileJar' : [':package:build', ':package:completeInnoSetup', ':package:processResources']
]
if (useJpackage) buildAliases.put('createInstaller', [':package:build', ':package:completeInnoSetup', ':package:processResources', ':package:innoCompile'])

def expandedTaskList = []

/*
dependencies {
	// implementation 'com.google.api-client:google-api-client:1.34.1'
	implementation 'net.sf.aguacate.security.service.oauth2:security-service-oauth2-google:0.0.15'
	implementation 'hu.blackbelt.bundles.google-api-client:com.google.api-services-oauth2:1.23.0_1'
    implementation 'commons-codec:commons-codec:1.15'
}	*/

gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}

gradle.startParameter.taskNames = expandedTaskList.flatten()
